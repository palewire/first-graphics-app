```{include} _templates/nav.html
```

# Internet

In in our last chapter, all the work we've done will finally be published online.

Our Yeoman framework, with its tools, structure and shortcuts, has served us well. It's been a great place to experiment, organize and develop our work. But it's useless to our readers.

The HTML, JavaScript and CSS files the framework generates are all they need. Without all the code running in our terminal, those files aren't be able to take advantage of Yeogurt, Gulp, BrowserSync and all our other tricks. But it won't matter. We can upload the simple files our framework renders to the web and they'll be enough for anyone who wants them.

That process — converting a dynamic, living website to simple files living on the filesystem — is a common strategy for publishing news sites. It goes by different names, like "flattening," "freezing" or "baking."  Whatever you call it, it’s a solid path to cheap­, stable host­ing for simple sites. It is used across the industry for pub­lish­ing elec­tion res­ults, longform stories, spe­cial pro­jects and numerous other things.

:::{note}
Examples of static news pages in the wild include:

- [A wide array of interactive graphics](https://twitter.com/PostGraphics/status/1207035549527236609) by The Washington Post
- Hundreds of Los Angeles Times stories at [latimes.com/projects](http://www.latimes.com/projects/)
- Dozens more from The Seattle Times at [projects.seattletimes.com](https://projects.seattletimes.com)
- Interactive apps by [The Dallas Morning News](https://interactives.dallasnews.com/2018/secrets-dallas-dead/)
- [Live election results](https://open.blogs.nytimes.com/2010/12/20/using-flat-files-so-elections-dont-break-your-server/) published by The New York Times
- Data downloads from the [California Civic Data Coalition](https://calaccess.californiacivicdata.org/downloads/latest/)
:::

Lucky for us, Yeogurt is pre-configured to flatten our dynamic site. And GitHub has a hosting service for publishing static pages.

Open the `package.json` file at the root of the project. Scroll to the bottom. In the `config` section edit it to instruct Gulp to flatten files to the `docs` directory instead of `build`.

```{code-block} javascript
:emphasize-lines: 8

"config": {
  "//": "Entry files",
  "host": "127.0.0.1",
  "port": "3000",
  "baseUrl": "./",
  "directories": {
    "source": "src",
    "destination": "docs",
    "temporary": "tmp",
    "//": "Directories relative to `source` directory",
    "modules": "_modules",
    "layouts": "_layouts",
    "images": "_images",
    "styles": "_styles",
    "scripts": "_scripts",
    "data": "_data"
  }
}
```

Return to your terminal where the `serve` command is running. Hit `CTRL-C` or `CTRL-Z` to terminate its process.

Once you are back at the standard terminal, enter the following command to build a static version of your site. Rather than start up the local test server we've been using so far, it will instead save the site as flat files in `docs`.

```bash
$ npm run-script build
```

That saves the entire file to the `docs` folder. We're doing that because it's the folder expected by GitHub's free publishing system, called "Pages."

Commit and push to GitHub.

```bash
$ git add .
$ git commit -m "Built site to docs folder"
$ git push origin master
```

To take advantage of it. Go to the repository on GitHub. Click on the "Settings" tab. Scroll down to the "GitHub Pages" section. Select "master branch /docs folder" as the source. Hit save.

This will result in any files pushed to the "docs" directory of your repository being published on the web. For free.

Wait a few moments and visit [\<your_username>.github.com/first-graphics-app/](https://ireapps.github.io/first-graphics-app/). You should see your app published live on the World Wide Web.

```{image} _static/preview.gif
:target: https://ireapps.github.io/first-graphics-app/
:width: 100%
```

:::{warning}
If your page does not appear, make sure that you have verified your email address with GitHub. It is required before the site will allow publishing pages. And keep in mind there are many other options for publishing flat files, like [Amazon's S3 service](https://en.wikipedia.org/wiki/Amazon_S3).
:::

Congratulations! You've finished this class.

## What's next?

If you enjoyed what you learned today, here are some resources to help you get further down the path of news nerdery. Many of these resources are tools we've used ourselves.

- [w3schools.com](https://www.w3schools.com/) has a pretty good introductory tutorial for basic [HTML](https://www.w3schools.com/html/) and [CSS](https://www.w3schools.com/css/)
- If charts interest you, there is much more you can do with [Datawrapper](https://academy.datawrapper.de/)!
  - Or you could dive into learning [d3.js](https://d3js.org/), [*Interactive Data Visualization for the Web, 2nd Edition*](https://www.oreilly.com/library/view/interactive-data-visualization/9781491921296/) is a good resource if you like learning from a book
  - [Observable notebooks](https://observablehq.com/) are also a great way to explore and browse data visualizations, and figure out how they update by changing parts of the code. You can log in with the same GitHub account you used in class today, and Ben's also [written a tutorial](https://observablehq.com/collection/@palewire/first-observable-notebook-2020)
- For mapping, experiment more with [Leaflet](https://leafletjs.com/), or for even more flexible maps, check out [Mapbox.js](https://docs.mapbox.com/help/tutorials/) or the open-source [Maplibre](https://maplibre.org/)